// Package Openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.1 DO NOT EDIT.
package main

import (
	// "fmt"
	"net/http"

	"github.com/GrivIN/CommonCodesApi/Openapi"
	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/go-chi/render"
)

//
// OUR CODE
//

type ServerImpl struct{}

func (*ServerImpl) GetSystem(w http.ResponseWriter, r *http.Request) {
	name := "test"
	system := &System{Name: &name}
	render.Render(w, r, system)
}

func (*ServerImpl) GetSystemSystemNameCodeCodeId(w http.ResponseWriter, r *http.Request, systemName string, codeId string) {
	// Implement me
}

// Code defines model for code.
type Code struct {
	Description *string `json:"description,omitempty"`
	Id          *string `json:"id,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// System defines model for system.
type System struct {
	Name *string `json:"name,omitempty"`
}

func (rd *System) Render(w http.ResponseWriter, r *http.Request) error {
	// Pre-processing before a response is marshalled and sent across the wire
	return nil
}

func main() {
	var myServer ServerImpl
	r := chi.NewRouter()
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(render.SetContentType(render.ContentTypeJSON))

	Openapi.HandlerFromMux(&myServer, r)
	http.ListenAndServe(":3333", r)
}
